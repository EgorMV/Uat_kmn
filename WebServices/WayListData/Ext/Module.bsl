
Функция GetAuto()
	
	ТипМассивАвто = ФабрикаXDTO.Тип("http://it-ing.ru", "AutoArray");
	ТипСтрокаАвто = ФабрикаXDTO.Тип("http://it-ing.ru", "AutoString");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Автомобили.Наименование,
	|	Автомобили.VIN,
	|	Автомобили.ГосударственныйНомер,
	|	ЕСТЬNULL(уатНормыРасходаГСМСрезПоследних.ЛинейнаяНорма, 0) КАК РасходТопливаПоНорме,
	|	Автомобили.Ссылка КАК ТранспортноеСредство
	|ПОМЕСТИТЬ ВТ_Авто
	|ИЗ
	|	Справочник.уатТС КАК Автомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНормыРасходаГСМ.СрезПоследних КАК уатНормыРасходаГСМСрезПоследних
	|		ПО (уатНормыРасходаГСМСрезПоследних.МодельТС = Автомобили.Ссылка.Модель)
	|			И Автомобили.Модель.ОсновноеТопливо = уатНормыРасходаГСМСрезПоследних.ГСМ
	|ГДЕ
	|	Автомобили.ПометкаУдаления = ЛОЖЬ
	|	И Автомобили.ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(уатПутевойЛист.СпидометрВозвращения) КАК СпидометрВозвращения,
	|	уатПутевойЛист.ТранспортноеСредство
	|ПОМЕСТИТЬ ВТ_Спидометр
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.ТранспортноеСредство В
	|			(ВЫБРАТЬ
	|				Т.ТранспортноеСредство
	|			ИЗ
	|				ВТ_Авто КАК Т)
	|	И уатПутевойЛист.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛист.ТранспортноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Авто.Наименование,
	|	ВТ_Авто.VIN,
	|	ВТ_Авто.ГосударственныйНомер,
	|	ВТ_Авто.РасходТопливаПоНорме,
	|	ЕСТЬNULL(ВТ_Спидометр.СпидометрВозвращения, 0) КАК СпидометрВозвращения
	|ИЗ
	|	ВТ_Авто КАК ВТ_Авто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Спидометр КАК ВТ_Спидометр
	|		ПО ВТ_Авто.ТранспортноеСредство = ВТ_Спидометр.ТранспортноеСредство";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивАвто = ФабрикаXDTO.Создать(ТипМассивАвто);
	Пока Выборка.Следующий() Цикл
		ЭлементАвто = ФабрикаXDTO.Создать(ТипСтрокаАвто);
		ЭлементАвто.Name 			= Выборка.Наименование+" ("+Выборка.ГосударственныйНомер+")";
		ЭлементАвто.ID 	 			= Выборка.VIN;
		ЭлементАвто.ExpenseFuelNorm = Выборка.РасходТопливаПоНорме;
		ЭлементАвто.SpidometrEnd 	= Выборка.СпидометрВозвращения;
		МассивАвто.Auto.Добавить(ЭлементАвто);
	КонецЦикла;	
	
	Возврат МассивАвто;

КонецФункции

Функция GetGasStation()
	
	ТипМассивЗаправки = ФабрикаXDTO.Тип("http://it-ing.ru", "GasStationArray");
	ТипСтрокаЗаправка = ФабрикаXDTO.Тип("http://it-ing.ru", "GasStationString");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатАЗС.Наименование,
	|	уатАЗС.Код
	|ИЗ
	|	Справочник.уатАЗС КАК уатАЗС
	|ГДЕ
	|	НЕ уатАЗС.ЭтоАЗССклад
	|	И уатАЗС.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивЗаправки = ФабрикаXDTO.Создать(ТипМассивЗаправки);
	Пока Выборка.Следующий() Цикл
		ЭлементЗаправка = ФабрикаXDTO.Создать(ТипСтрокаЗаправка);
		ЭлементЗаправка.Name = Выборка.Наименование;
		ЭлементЗаправка.ID 	 = Выборка.Код;
		МассивЗаправки.GasStation.Добавить(ЭлементЗаправка);
	КонецЦикла;	
	
	Возврат МассивЗаправки;

КонецФункции

Функция GetFuel()
	
	ТипМассивТопливо = ФабрикаXDTO.Тип("http://it-ing.ru", "FuelArray");
	ТипСтрокаТопливо = ФабрикаXDTO.Тип("http://it-ing.ru", "FuelString");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатНоменклатураГСМ.Номенклатура.Наименование КАК Наименование,
	|	уатНоменклатураГСМ.Номенклатура.Код КАК Код
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивТопливо = ФабрикаXDTO.Создать(ТипМассивТопливо);
	Пока Выборка.Следующий() Цикл
		ЭлементТопливо = ФабрикаXDTO.Создать(ТипСтрокаТопливо);
		ЭлементТопливо.Name = Выборка.Наименование;
		ЭлементТопливо.ID 	= Выборка.Код;
		МассивТопливо.Fuel.Добавить(ЭлементТопливо);
	КонецЦикла;	
	
	Возврат МассивТопливо;
	
КонецФункции

Функция GetMotionFuel()
	
	ТипМассивДвижениеГСМ = ФабрикаXDTO.Тип("http://it-ing.ru", "MotionFuelArray");
	ТипСтрокаДвижениеГСМ = ФабрикаXDTO.Тип("http://it-ing.ru", "MotionFuelString");
		
	ВидыДвиженияГСМ = Новый СписокЗначений;
	ВидыДвиженияГСМ.Добавить("ЗаправкаНаличные", "Заправка за наличные");
	ВидыДвиженияГСМ.Добавить("ЗаправкаПластиковаяКарта", "Заправка по пластиковой карте");
	
	МассивДвижениеГСМ = ФабрикаXDTO.Создать(ТипМассивДвижениеГСМ);
	Для Каждого Сч Из ВидыДвиженияГСМ Цикл
		
		ЭлементДвижениеГСМ = ФабрикаXDTO.Создать(ТипСтрокаДвижениеГСМ);
		ЭлементДвижениеГСМ.Name = Сч.Представление;
		ЭлементДвижениеГСМ.ID = Сч.Значение;
		МассивДвижениеГСМ.MotionFuel.Добавить(ЭлементДвижениеГСМ);
		
	КонецЦикла;
	
	Возврат МассивДвижениеГСМ;
	
КонецФункции

Функция GetCard()
	
	ТипМассивКарточки = ФабрикаXDTO.Тип("http://it-ing.ru", "CardArray");
	ТипСтрокаКарточки = ФабрикаXDTO.Тип("http://it-ing.ru", "CardString");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатПластиковыеКарты.Ссылка,
	|	уатПластиковыеКарты.Код,
	|	уатПластиковыеКарты.Представление
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивКарточки = ФабрикаXDTO.Создать(ТипМассивКарточки);
	Пока Выборка.Следующий() Цикл
		ЭлементКарточки = ФабрикаXDTO.Создать(ТипСтрокаКарточки);
		ЭлементКарточки.Name = Выборка.Представление;
		ЭлементКарточки.ID 	= Выборка.Код;
		МассивКарточки.Card.Добавить(ЭлементКарточки);
	КонецЦикла;	
	
	Возврат МассивКарточки;
	
КонецФункции

Функция GetData(GUID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", GUID);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ДокументДО"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ИскДок = Выборка.Объект;
		
		ОстатокТопливаВыезд = 0;
		ОстатокТопливаВозврат = 0;
		//РасходПоНорме = 0;
		Для Каждого ТекСтрока Из ИскДок.РасходГСМ Цикл
			Если ИскДок.ТранспортноеСредство = ТекСтрока.ТС
				И ИскДок.ТранспортноеСредство.Модель.ОсновноеТопливо = ТекСтрока.ГСМ Тогда
				ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
				ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		ТипПутевойЛист 		= ФабрикаXDTO.Тип("http://it-ing.ru", "WayList");
		ТипЗадание 			= ФабрикаXDTO.Тип("http://it-ing.ru", "WayListTask");
		ТипАЗС 				= ФабрикаXDTO.Тип("http://it-ing.ru", "WayListGasStations");
		ТипАвтоСтрока		= ФабрикаXDTO.Тип("http://it-ing.ru", "AutoString");
		ТипАЗССтрока 		= ФабрикаXDTO.Тип("http://it-ing.ru", "GasStationString");
		ТипТопливоСтрока 	= ФабрикаXDTO.Тип("http://it-ing.ru", "FuelString");
		ТипСтрокаДвижениеГСМ = ФабрикаXDTO.Тип("http://it-ing.ru", "MotionFuelString");
		ТипСтрокаКарточка 	= ФабрикаXDTO.Тип("http://it-ing.ru", "CardString");

		Автомобиль = ФабрикаXDTO.Создать(ТипАвтоСтрока);
		Автомобиль.Name = ИскДок.ТранспортноеСредство.Наименование + "("+ИскДок.ТранспортноеСредство.ГосударственныйНомер+")";
		Автомобиль.ID	= ИскДок.ТранспортноеСредство.VIN;
		
		ПутевойЛист = ФабрикаXDTO.Создать(ТипПутевойЛист);
		ПутевойЛист.Number 			= ИскДок.Номер;
		ПутевойЛист.Date 			= ИскДок.Дата;
		ПутевойЛист.Auto 			= Автомобиль;
		ПутевойЛист.Driver 			= ИскДок.Водитель1.ФизическоеЛицо.Наименование;
		ПутевойЛист.CountFuelStart 	= ОстатокТопливаВыезд;
		ПутевойЛист.CountFuelEnd 	= ОстатокТопливаВозврат;
		ПутевойЛист.SpeedometrStart = ИскДок.СпидометрВыезда;
		ПутевойЛист.SpeedometrEnd 	= ИскДок.СпидометрВозвращения;
			
		Для Каждого Стр Из ИскДок.Задание Цикл
			
			Задание = ФабрикаXDTO.Создать(ТипЗадание);
			Задание.StartPoint 	= Строка(Стр.АдресУбытия);
			Задание.StopPoint 	= Строка(Стр.АдресПрибытия);
			Задание.StartDate 	= Стр.ВремяУбытия;
			Задание.StopDate 	= Стр.ВремяПрибытия;
			Задание.Run			= Стр.КоличествоКмГруз;
			ПутевойЛист.Tasks.Добавить(Задание);
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатЗаправкаГСМЗаправки.Ссылка,
		|	уатЗаправкаГСМЗаправки.Дата КАК Дата,
		|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
		|	уатЗаправкаГСМЗаправки.ГСМ,
		|	уатЗаправкаГСМЗаправки.Цена,
		|	уатЗаправкаГСМЗаправки.Сумма,
		|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидДвиженияГСМ,
		|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
		|	уатЗаправкаГСМЗаправки.Количество
		|ИЗ
		|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|ГДЕ
		|	уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		|	И уатЗаправкаГСМЗаправки.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Запрос.УстановитьПараметр("ПутевойЛист", ИскДок);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			//создаем элемент АЗС
			АЗС = ФабрикаXDTO.Создать(ТипАЗССтрока);
			АЗС.Name = Выборка.АЗС.Наименование;
			АЗС.ID = Выборка.АЗС.Код;
			
			//создаем элемент Топливо
			Топливо = ФабрикаXDTO.Создать(ТипТопливоСтрока);
			Топливо.Name = Выборка.ГСМ.Наименование;
			Топливо.ID = Выборка.ГСМ.Код;
			
			//создаем элемент ВидДвиженияГСМ
			ДвижениеГСМ = ФабрикаXDTO.Создать(ТипСтрокаДвижениеГСМ);
			Если Выборка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда
				ВидДвижения = "ЗаправкаПластиковаяКарта";
			Иначе                                      
				ВидДвижения = "ЗаправкаНаличные";
			КонецЕсли;
				
			ДвижениеГСМ.Name = ВидДвижения;
			ДвижениеГСМ.ID = ВидДвижения;
			
			//создаем элемент ПластиковаяКарта
			ПластиковаяКарта = ФабрикаXDTO.Создать(ТипСтрокаКарточка);
			ПластиковаяКарта.Name = Строка(Выборка.ПластиковаяКарта);
			ПластиковаяКарта.ID = Строка(Выборка.ПластиковаяКарта.Код);

			Заправка = ФабрикаXDTO.Создать(ТипАЗС);
			Заправка.Date 		= Выборка.Дата;
			Заправка.GasStation = АЗС;
			Заправка.Fuel 		= Топливо;
			Заправка.Price 		= Выборка.Цена;
			Заправка.Total 		= Выборка.Сумма;
			Заправка.Quantity	= Выборка.Количество;
			Заправка.MotionFuel = ДвижениеГСМ;
			Заправка.Card		= ПластиковаяКарта;
			Заправка.ID			= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
			ПутевойЛист.GasStations.Добавить(Заправка);
			
		КонецЦикла;
		
		Возврат ПутевойЛист;

	КонецЕсли;
	
КонецФункции

Функция GetCountFuelStart(VIN)
	
	ОстатокТопливаВыезд = 0;
	ТранспортноеСредство = Справочники.уатТС.НайтиПоРеквизиту("VIN", VIN);
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(ТекущаяДата(), ТранспортноеСредство,
			ТранспортноеСредство.Модель.ОсновноеТопливо);		
	КонецЕсли;
	
	Возврат ОстатокТопливаВыезд;
			
КонецФункции	

Функция SaveData(Data)
	
	СписокXDTO 				= Data.Property;
	ДокГУИД 				= СписокXDTO[0].Value;
	Автомобиль 				= СписокXDTO[1].Value;
	Водитель				= СписокXDTO[2].Value;
	ДатаВыезда      		= СписокXDTO[3].Value;
	ДатаВозвращения 		= СписокXDTO[4].Value;
	Задание					= СписокXDTO[5].Value;
	ГСМ						= СписокXDTO[6].Value;
	Проект					= СписокXDTO[7].Value;
	ОрганизацияИНН			= СписокXDTO[8].Value; //ИНН
	ПоказанияПриборовДО		= СписокXDTO[9].Value.Property;
	ПометкаУдаления 		= СписокXDTO[10].Value;
	
	ПоказанияПриборовУАТ = Новый Структура;
	ПоказанияПриборовУАТ.Вставить("ОстатокТопливаВыезд"		, ПоказанияПриборовДО[0].Value);
	ПоказанияПриборовУАТ.Вставить("ОстатокТопливаВозврат"	, ПоказанияПриборовДО[1].Value);
	ПоказанияПриборовУАТ.Вставить("СпидометрВыезд"			, ПоказанияПриборовДО[2].Value);
	ПоказанияПриборовУАТ.Вставить("СпидометрВозврат"		, ПоказанияПриборовДО[3].Value);
	
	ДанныеВодителя = Новый Структура("Сотрудник, ТекущаяОрганизация, ТекущееПодразделение");
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ОсновнаяОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ОрганизацияИНН);
	Если ОсновнаяОрганизация.Пустая() Тогда
		Возврат "Не найдена организация по ИНН "+ОрганизацияИНН;
	КонецЕсли;	

	//попробуем найти документ по ГУИД из ДО
	ИскСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ДокументДО");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", ДокГУИД);
	Запрос.УстановитьПараметр("Свойство", ИскСвойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокПЛ = Выборка.Объект.ПолучитьОбъект();
	Иначе
		Если Не ПометкаУдаления Тогда
			ДокПЛ = Документы.уатПутевойЛист.СоздатьДокумент();
			ДокПЛ.Дата = ТекущаяДата();
			ДокПЛ.Комментарий = "#Создан автоматически из документооборота";
		КонецЕсли;	
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		СтруктураВозврата = Новый Структура;
		Если ДокПЛ<>Неопределено Тогда
			Попытка
				ДокПЛ.УстановитьПометкуУдаления(Истина);
				СтруктураВозврата.Вставить("ПометкаУдаления", Истина);
			Исключение
				СтруктураВозврата.Вставить("ПометкаУдаления", Ложь);
				СтруктураВозврата.Вставить("Ошибки", ОписаниеОшибки());
			КонецПопытки;
		Иначе
			//вдруг в УАТе уже удалили документ
			СтруктураВозврата.Вставить("ПометкаУдаления", Ложь);
			СтруктураВозврата.Вставить("Ошибки", "Документ не найден!");
		КонецЕсли;	
		Возврат ОповеститьДО(СтруктураВозврата);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", ОсновнаяОрганизация);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОсновноеПодразделение = Справочники.Организации.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОсновноеПодразделение = Выборка.Подразделение;
	КонецЕсли;	
	
	//Получим сотрудника-водителя по ФИО из ДО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
	|ГДЕ
	|	Сотрудники.Наименование = &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПриема УБЫВ";

	Запрос.УстановитьПараметр("Наименование", Водитель);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//Сотрудник отсутствует
		
		//создадим физлицо
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Наименование = Водитель;
		ФизЛицо.УстановитьНовыйКод();
		ФизЛицо.Записать();

		//создадим сотрудника
		Сотрудник = Справочники.Сотрудники.СоздатьЭлемент();
		Сотрудник.Наименование = Водитель;
		Сотрудник.ГоловнаяОрганизация = ОсновнаяОрганизация;
		Сотрудник.ФизическоеЛицо = ФизЛицо.Ссылка;
		Сотрудник.УстановитьНовыйКод();
		Сотрудник.Записать();
		
		//устроим на работу
		Запись = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьМенеджерЗаписи();
		Запись.Период				= ТекущаяДата();
		Запись.Сотрудник 			= Сотрудник.Ссылка;
		Запись.ФизическоеЛицо 		= Сотрудник.ФизическоеЛицо;
		Запись.ГоловнаяОрганизация 	= ОсновнаяОрганизация;
		Запись.ТекущаяОрганизация 	= ОсновнаяОрганизация;
		Запись.ТекущееПодразделение = ОсновноеПодразделение;
		Запись.ДатаПриема			= ТекущаяДата();
		Запись.Записать();
		
		ДанныеВодителя.Вставить("Сотрудник", Сотрудник.Ссылка);
		ДанныеВодителя.Вставить("ТекущаяОрганизация", ОсновнаяОрганизация);
		ДанныеВодителя.Вставить("ТекущееПодразделение", ОсновноеПодразделение);

		//Возврат "Не найден сотрудник <"+Водитель+">";
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ТекущаяОрганизация) Тогда
			//Есть все данные сотрудника
			ЗаполнитьЗначенияСвойств(ДанныеВодителя, Выборка);
		Иначе
			//устроим на работу
			Запись = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьМенеджерЗаписи();
			Запись.Период				= ТекущаяДата();
			Запись.Сотрудник 			= Выборка.Сотрудник;
			Запись.ФизическоеЛицо 		= Выборка.Сотрудник.ФизическоеЛицо;
			Запись.ГоловнаяОрганизация 	= ОсновнаяОрганизация;
			Запись.ТекущаяОрганизация 	= ОсновнаяОрганизация;
			Запись.ТекущееПодразделение = ОсновноеПодразделение;
			Запись.ДатаПриема			= ТекущаяДата();
			Запись.Записать();

			ДанныеВодителя.Вставить("Сотрудник", Выборка.Сотрудник);
			ДанныеВодителя.Вставить("ТекущаяОрганизация", ОсновнаяОрганизация);
			ДанныеВодителя.Вставить("ТекущееПодразделение", ОсновноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	
		
	ДокПЛ.ОбменДанными.Загрузка = Истина;
	ДокПЛ.Организация 			= ДанныеВодителя.ТекущаяОрганизация;
	ДокПЛ.Подразделение			= ДанныеВодителя.ТекущееПодразделение;
	ДокПЛ.Водитель1 			= ДанныеВодителя.Сотрудник;
	ДокПЛ.ТранспортноеСредство 	= Справочники.уатТС.НайтиПоРеквизиту("VIN", Автомобиль);
	ДокПЛ.ВидПЛ					= Перечисления.уатВидыПЛ._3;
	ДокПЛ.ДатаВыезда			= ДатаВыезда;
	ДокПЛ.ДатаВозвращения		= КонецДня(ДатаВозвращения);
	ДокПЛ.Проект				= ПолучитьПроект(Проект);
	ДокПЛ.РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию;
	ДокПЛ.ПланЗатрат			= Справочники.уатПланыПримененияЗатрат.НайтиПоНаименованию("Страховой полис");
	ДокПЛ.РасчетФактРасходаГСМ	= Перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать;
	ДокПЛ.НачислятьЗПВодителю1	= Истина;
	//ДокПЛ.ДатаЗакрытия			= ТекущаяДата();
	ДокПЛ.Ответственный			= Пользователь;
	ДокПЛ.УстановитьОтветственныхЛиц();

	ОбщийПробег = 0;
	ДокПЛ.Задание.Очистить();
	Для Каждого Стр Из Задание.row Цикл		
		НСтрока = ДокПЛ.Задание.Добавить();
		НСтрока.Выполнено			= Истина;
		НСтрока.АдресУбытия 		= Стр.Value[0];
		НСтрока.АдресПрибытия 		= Стр.Value[1];
		НСтрока.ВремяУбытия 		= Стр.Value[2];
		НСтрока.ВремяПрибытия		= Стр.Value[3];
	 	НСтрока.КоличествоКмГруз 	= Стр.Value[4];
		НСтрока.КоличествоЕздок		= 1;
		ОбщийПробег = ОбщийПробег + НСтрока.КоличествоКмГруз;
	КонецЦикла;
		
	мСоставТС = Новый Массив;
	ДокПЛ.ИнициализацияДанныхАвтомобиля(, мСоставТС, Ложь);	
	
	ДокПЛ.СпидометрВыезда		= ПоказанияПриборовУАТ.СпидометрВыезд;
	ДокПЛ.СпидометрВозвращения	= ПоказанияПриборовУАТ.СпидометрВозврат;
	
	//ДокПЛ.СпидометрВозвращения = ДокПЛ.СпидометрВыезда + ОбщийПробег;
	
	//Зарплата
	//НСтрока = ДокПЛ.Зарплата.Добавить();
	//НСтрока.ВидНачисления = ПланыВидовРасчета.уатОсновныеНачисления.СдельнаяОплата;
	//НСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
	//НСтрока.Сотрудник = ДанныеВодителя.Сотрудник;
	
	Попытка
		Если ДокПЛ.ЭтоНовый() Тогда
			ДокПЛ.УстановитьНовыйНомер();
		КонецЕсли;	
		ДокПЛ.Записать();
		Ошибки = "ОК"
	Исключение
		Ошибки = ОписаниеОшибки();	
	КонецПопытки;
	
	Если Ошибки <> "ОК" Тогда
		Возврат Ошибки;
	КонецЕсли;
	
	ТипыГСМ = Новый Массив;
	
	//Структура таблицы ГСМ
	СтруктураКолонокГСМ = Новый Структура;
	СтруктураКолонокГСМ.Вставить("ТипТоплива"	, 0);
	СтруктураКолонокГСМ.Вставить("Дата"			, 2);
	СтруктураКолонокГСМ.Вставить("Цена"			, 3);
	СтруктураКолонокГСМ.Вставить("Сумма"		, 4);
	СтруктураКолонокГСМ.Вставить("ТипТопливаКод", 5);
	СтруктураКолонокГСМ.Вставить("ЗаправкаКод"	, 6);
	СтруктураКолонокГСМ.Вставить("ДвижениеГСМ"	, 7);
	СтруктураКолонокГСМ.Вставить("ГУИД"			, 8);
	СтруктураКолонокГСМ.Вставить("КарточкаКод"	, 10);
	СтруктураКолонокГСМ.Вставить("Количество"	, 11);
	СтруктураКолонокГСМ.Вставить("НаУдаление"	, 12);

	//Запишем заправки
	Для Каждого Стр Из ГСМ.row Цикл
		
		Если Стр.Value[СтруктураКолонокГСМ.ГУИД] <> "" Тогда	
			ИскЗаправка = Документы.уатЗаправкаГСМ.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Value[СтруктураКолонокГСМ.ГУИД]));
			Если НЕ ИскЗаправка.Пустая() Тогда
				ДокЗаправка = ИскЗаправка.ПолучитьОбъект();
				Если Стр.Value[СтруктураКолонокГСМ.НаУдаление] Тогда
					ДокЗаправка.Заправки.Очистить();
					ДокЗаправка.Записать();
					ДокЗаправка.УстановитьПометкуУдаления(Истина);
					Продолжить;
				Иначе	
					ДокЗаправка.Заправки.Очистить();
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;	
		Иначе
			//по ошибке могут попробовать удалить еще незаписанный документ
			Если НЕ Стр.Value[СтруктураКолонокГСМ.НаУдаление] Тогда
				ДокЗаправка = Документы.уатЗаправкаГСМ.СоздатьДокумент();	
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		ТипГСМ = Справочники.Номенклатура.НайтиПоКоду(Стр.Value[СтруктураКолонокГСМ.ТипТопливаКод]);
		ТипыГСМ.Добавить(ТипГСМ);
		
		ДокЗаправка.Дата 			= Стр.Value[СтруктураКолонокГСМ.Дата];
		ДокЗаправка.Организация 	= ДанныеВодителя.ТекущаяОрганизация;
		ДокЗаправка.АЗС 			= Справочники.уатАЗС.НайтиПоКоду(Стр.Value[СтруктураКолонокГСМ.ЗаправкаКод]);
		ДокЗаправка.ВидДвиженияГСМ 	= Перечисления.уатВидыДвиженияГСМ[Стр.Value[СтруктураКолонокГСМ.ДвижениеГСМ]];
		ДокЗаправка.Комментарий		= "#Создан автоматически из документооборота";
		ДокЗаправка.ДоговорКонтрагента		 = ПолучитьДоговор(ДокЗаправка.Организация, ДокЗаправка.АЗС.Контрагент_Склад);
		ДокЗаправка.ПодразделениеОрганизации = ДанныеВодителя.ТекущееПодразделение;
		ДокЗаправка.СуммаВключаетНДС = Ложь;
		
		НСтрока = ДокЗаправка.Заправки.Добавить();
		НСтрока.Дата 		= ДокЗаправка.Дата;
		НСтрока.Водитель 	= ДанныеВодителя.Сотрудник;
		НСтрока.ТС			= ДокПЛ.ТранспортноеСредство;
		НСтрока.ГСМ 		= ТипГСМ;
		НСтрока.Цена 		= Стр.Value[СтруктураКолонокГСМ.Цена];
		НСтрока.Сумма 		= Стр.Value[СтруктураКолонокГСМ.Сумма];
		НСтрока.Количество 	= Стр.Value[СтруктураКолонокГСМ.Количество];
		НСтрока.Валюта		= Константы.ВалютаРегламентированногоУчета.Получить();
		НСтрока.ПутевойЛист	= ДокПЛ.Ссылка;
		НСтрока.СтавкаНДС	= Перечисления.СтавкиНДС.БезНДС;
		НСтрока.ПластиковаяКарта = Справочники.уатПластиковыеКарты.НайтиПоКоду(Стр.Value[СтруктураКолонокГСМ.КарточкаКод]);
		
		ДокЗаправка.КоличествоДокумента = ДокЗаправка.Заправки.Итог("Количество");
		ДокЗаправка.СуммаДокумента		= ДокЗаправка.Заправки.Итог("Сумма");
		Попытка
			ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
		КонецПопытки	
	КонецЦикла;
	
	Для Каждого Стр Из ДокПЛ.РасходГСМ Цикл
		Если Стр.ГСМ = ДокПЛ.ТранспортноеСредство.Модель.ОсновноеТопливо Тогда
			Стр.Активен = Истина;
			Стр.ОстатокПриВыезде = ПоказанияПриборовУАТ.ОстатокТопливаВыезд;
			Стр.ОстатокПриВозвращении = ПоказанияПриборовУАТ.ОстатокТопливаВозврат;
		КонецЕсли;	
	КонецЦикла;
	
	Рез = ДокПЛ.РасчетИтогов(Ложь, Истина);

	//запишем ГУИД в свойства
	НЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	НЗапись.Объект 		= ДокПЛ.Ссылка;
	НЗапись.Свойство 	= ИскСвойство;
	НЗапись.Значение 	= ДокГУИД;
	НЗапись.Записать();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Номер"	, ДокПЛ.Номер);
	СтруктураВозврата.Вставить("Дата"	, ДокПЛ.Дата);
	СтруктураВозврата.Вставить("Ошибки"	, Ошибки);
	
	Возврат ОповеститьДО(СтруктураВозврата);
		
КонецФункции

Функция PrintData(GUID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", GUID);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ДокументДО"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
		
	ТабДокумент = Документы.уатПутевойЛист.уатПечать_3(Выборка.Объект, "ПФ_MXL_3", 4);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(); 
	ТабДокумент.Записать(ИмяВременногоФайла);	
	ДанныеПечатнойФормы = ЗначениеВСтрокуВнутр(Новый ДвоичныеДанные(ИмяВременногоФайла));
		
	ТипПечатныйДокумент	= ФабрикаXDTO.Тип("http://it-ing.ru", "PrintDoc");
	ПечатныйДокумент = ФабрикаXDTO.Создать(ТипПечатныйДокумент);
	ПечатныйДокумент.Data = ДанныеПечатнойФормы;
	
	Возврат ПечатныйДокумент;
	
КонецФункции

Функция ПолучитьДоговор(Организация, Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)";
	
	Запрос.УстановитьПараметр("Организация"	, Организация);
	Запрос.УстановитьПараметр("Владелец"	, Владелец);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПроект(ИмяПроекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.ауПроекты КАК Проекты
	//|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Наименование = &Наименование
	|	И Проекты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", ИмяПроекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	Иначе
		НЭлемент = Справочники.ауПроекты.СоздатьЭлемент();
		//НЭлемент = Справочники.Проекты.СоздатьЭлемент();
		НЭлемент.Наименование = ИмяПроекта;
		Попытка
			НЭлемент.Записать();	
			Возврат НЭлемент.Ссылка;
		Исключение
			Возврат Справочники.ауПроекты.ПустаяСсылка();
		КонецПопытки
	КонецЕсли;
	
КонецФункции

Функция ОповеститьДО(СтруктураВозврата)
	
	//Описываем параметры записи и создаем запись JSON
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " " , Истина, ЭкранированиеСимволовJSON.Нет, Ложь, Ложь, Ложь, Ложь);
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураВозврата);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	Возврат СтрокаJSON;
	
КонецФункции	



